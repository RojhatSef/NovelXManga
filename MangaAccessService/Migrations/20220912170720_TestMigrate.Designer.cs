// <auto-generated />
using System;
using MangaAccessService;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MangaAccessService.Migrations
{
    [DbContext(typeof(MangaNNovelAuthDBContext))]
    [Migration("20220912170720_TestMigrate")]
    partial class TestMigrate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("GroupScanlatingModelMasterModel", b =>
                {
                    b.Property<int>("GroupScanlatingID")
                        .HasColumnType("int");

                    b.Property<int>("MasterModelsMasterID")
                        .HasColumnType("int");

                    b.HasKey("GroupScanlatingID", "MasterModelsMasterID");

                    b.HasIndex("MasterModelsMasterID");

                    b.ToTable("GroupScanlatingModelMasterModel");
                });

            modelBuilder.Entity("MangaModelService.BlogModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<int>("mangaId")
                        .HasColumnType("int");

                    b.Property<string>("mangaName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("blogModels");
                });

            modelBuilder.Entity("MangaModelService.ChapterModel", b =>
                {
                    b.Property<int>("chapterID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("chapterID"), 1L, 1);

                    b.Property<int>("GroupScanlatingID")
                        .HasColumnType("int");

                    b.Property<int>("GroupScanlatingModelsGroupScanlatingID")
                        .HasColumnType("int");

                    b.Property<int?>("Volumes")
                        .HasColumnType("int");

                    b.Property<string>("chapterLinkNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("chapterName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("chapterNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("dateRelease")
                        .HasColumnType("datetime2");

                    b.HasKey("chapterID");

                    b.HasIndex("GroupScanlatingModelsGroupScanlatingID");

                    b.ToTable("chapterModels");
                });

            modelBuilder.Entity("MangaModelService.GenresModel", b =>
                {
                    b.Property<int>("GenresId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GenresId"), 1L, 1);

                    b.Property<string>("GenreName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MangaID")
                        .HasColumnType("int");

                    b.Property<int>("mangaModelMangaID")
                        .HasColumnType("int");

                    b.HasKey("GenresId");

                    b.HasIndex("mangaModelMangaID");

                    b.ToTable("GenresModel");
                });

            modelBuilder.Entity("MangaModelService.GroupScanlatingModel", b =>
                {
                    b.Property<int>("GroupScanlatingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GroupScanlatingID"), 1L, 1);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupScanlatingName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserModelId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GroupScanlatingID");

                    b.HasIndex("UserModelId");

                    b.ToTable("groupScanlatingModels");

                    b.HasDiscriminator<string>("Discriminator").HasValue("GroupScanlatingModel");
                });

            modelBuilder.Entity("MangaModelService.MangaModel", b =>
                {
                    b.Property<int>("MangaID")
                        .HasColumnType("int");

                    b.Property<string>("ArtistModelId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AssociatedNames")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BlogModelID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MangaName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MasterModelID")
                        .HasColumnType("int");

                    b.Property<string>("PhotoPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReleaseYear")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MangaID");

                    b.HasIndex("ArtistModelId");

                    b.HasIndex("BlogModelID")
                        .IsUnique();

                    b.ToTable("mangaModels");
                });

            modelBuilder.Entity("MangaModelService.MasterModel", b =>
                {
                    b.Property<int>("MasterID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MasterID"), 1L, 1);

                    b.Property<string>("AuthorModelId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("MasterID");

                    b.HasIndex("AuthorModelId");

                    b.ToTable("MasterModels");
                });

            modelBuilder.Entity("MangaModelService.PostModel", b =>
                {
                    b.Property<int>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PostId"), 1L, 1);

                    b.Property<int>("BlogId")
                        .HasColumnType("int");

                    b.Property<int>("BlogModelid")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserModelId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("postComment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PostId");

                    b.HasIndex("BlogModelid");

                    b.HasIndex("UserModelId");

                    b.ToTable("PostModels");
                });

            modelBuilder.Entity("MangaModelService.TagModel", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TagId"), 1L, 1);

                    b.Property<int>("MangaID")
                        .HasColumnType("int");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("mangaModelMangaID")
                        .HasColumnType("int");

                    b.HasKey("TagId");

                    b.HasIndex("mangaModelMangaID");

                    b.ToTable("TagModel");
                });

            modelBuilder.Entity("MasterModelUserModel", b =>
                {
                    b.Property<int>("MasterModelMasterID")
                        .HasColumnType("int");

                    b.Property<string>("userModelsId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("MasterModelMasterID", "userModelsId");

                    b.HasIndex("userModelsId");

                    b.ToTable("MasterModelUserModel");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MangaModelService.StudioModel", b =>
                {
                    b.HasBaseType("MangaModelService.GroupScanlatingModel");

                    b.Property<string>("Biography")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Works")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("StudioModel");
                });

            modelBuilder.Entity("MangaModelService.UserModel", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("Allias")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ForumName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("UserModel");
                });

            modelBuilder.Entity("MangaModelService.ArtistModel", b =>
                {
                    b.HasBaseType("MangaModelService.UserModel");

                    b.Property<int>("AmountOfWork")
                        .HasColumnType("int")
                        .HasColumnName("ArtistModel_AmountOfWork");

                    b.Property<string>("Biography")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ArtistModel_Biography");

                    b.HasDiscriminator().HasValue("ArtistModel");
                });

            modelBuilder.Entity("MangaModelService.AuthorModel", b =>
                {
                    b.HasBaseType("MangaModelService.UserModel");

                    b.Property<int>("AmountOfWork")
                        .HasColumnType("int");

                    b.Property<string>("Biography")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("AuthorModel");
                });

            modelBuilder.Entity("GroupScanlatingModelMasterModel", b =>
                {
                    b.HasOne("MangaModelService.GroupScanlatingModel", null)
                        .WithMany()
                        .HasForeignKey("GroupScanlatingID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MangaModelService.MasterModel", null)
                        .WithMany()
                        .HasForeignKey("MasterModelsMasterID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MangaModelService.ChapterModel", b =>
                {
                    b.HasOne("MangaModelService.GroupScanlatingModel", "GroupScanlatingModels")
                        .WithMany("chapterModels")
                        .HasForeignKey("GroupScanlatingModelsGroupScanlatingID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GroupScanlatingModels");
                });

            modelBuilder.Entity("MangaModelService.GenresModel", b =>
                {
                    b.HasOne("MangaModelService.MangaModel", "mangaModel")
                        .WithMany("GenresModels")
                        .HasForeignKey("mangaModelMangaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("mangaModel");
                });

            modelBuilder.Entity("MangaModelService.GroupScanlatingModel", b =>
                {
                    b.HasOne("MangaModelService.UserModel", null)
                        .WithMany("GroupScanlating")
                        .HasForeignKey("UserModelId");
                });

            modelBuilder.Entity("MangaModelService.MangaModel", b =>
                {
                    b.HasOne("MangaModelService.ArtistModel", null)
                        .WithMany("MangaModels")
                        .HasForeignKey("ArtistModelId");

                    b.HasOne("MangaModelService.BlogModel", "BlogModel")
                        .WithOne("MangaModel")
                        .HasForeignKey("MangaModelService.MangaModel", "BlogModelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MangaModelService.MasterModel", "MasterModels")
                        .WithOne("MangaModels")
                        .HasForeignKey("MangaModelService.MangaModel", "MangaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BlogModel");

                    b.Navigation("MasterModels");
                });

            modelBuilder.Entity("MangaModelService.MasterModel", b =>
                {
                    b.HasOne("MangaModelService.AuthorModel", null)
                        .WithMany("MasterModels")
                        .HasForeignKey("AuthorModelId");
                });

            modelBuilder.Entity("MangaModelService.PostModel", b =>
                {
                    b.HasOne("MangaModelService.BlogModel", "BlogModel")
                        .WithMany("postsModel")
                        .HasForeignKey("BlogModelid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MangaModelService.UserModel", "UserModel")
                        .WithMany("PostModel")
                        .HasForeignKey("UserModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BlogModel");

                    b.Navigation("UserModel");
                });

            modelBuilder.Entity("MangaModelService.TagModel", b =>
                {
                    b.HasOne("MangaModelService.MangaModel", "mangaModel")
                        .WithMany("TagsModels")
                        .HasForeignKey("mangaModelMangaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("mangaModel");
                });

            modelBuilder.Entity("MasterModelUserModel", b =>
                {
                    b.HasOne("MangaModelService.MasterModel", null)
                        .WithMany()
                        .HasForeignKey("MasterModelMasterID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MangaModelService.UserModel", null)
                        .WithMany()
                        .HasForeignKey("userModelsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MangaModelService.BlogModel", b =>
                {
                    b.Navigation("MangaModel")
                        .IsRequired();

                    b.Navigation("postsModel");
                });

            modelBuilder.Entity("MangaModelService.GroupScanlatingModel", b =>
                {
                    b.Navigation("chapterModels");
                });

            modelBuilder.Entity("MangaModelService.MangaModel", b =>
                {
                    b.Navigation("GenresModels");

                    b.Navigation("TagsModels");
                });

            modelBuilder.Entity("MangaModelService.MasterModel", b =>
                {
                    b.Navigation("MangaModels")
                        .IsRequired();
                });

            modelBuilder.Entity("MangaModelService.UserModel", b =>
                {
                    b.Navigation("GroupScanlating");

                    b.Navigation("PostModel");
                });

            modelBuilder.Entity("MangaModelService.ArtistModel", b =>
                {
                    b.Navigation("MangaModels");
                });

            modelBuilder.Entity("MangaModelService.AuthorModel", b =>
                {
                    b.Navigation("MasterModels");
                });
#pragma warning restore 612, 618
        }
    }
}
