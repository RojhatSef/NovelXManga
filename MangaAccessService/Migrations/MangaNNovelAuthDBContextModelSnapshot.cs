// <auto-generated />
using System;
using MangaAccessService;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MangaAccessService.Migrations
{
    [DbContext(typeof(MangaNNovelAuthDBContext))]
    partial class MangaNNovelAuthDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ArtistModelMangaModel", b =>
                {
                    b.Property<int>("ArtistModelsArtistId")
                        .HasColumnType("int");

                    b.Property<int>("MangaModelsMangaID")
                        .HasColumnType("int");

                    b.HasKey("ArtistModelsArtistId", "MangaModelsMangaID");

                    b.HasIndex("MangaModelsMangaID");

                    b.ToTable("ArtistModelMangaModel");
                });

            modelBuilder.Entity("AuthorModelMangaModel", b =>
                {
                    b.Property<int>("AuthormodelsAuthorID")
                        .HasColumnType("int");

                    b.Property<int>("MangaModelsMangaID")
                        .HasColumnType("int");

                    b.HasKey("AuthormodelsAuthorID", "MangaModelsMangaID");

                    b.HasIndex("MangaModelsMangaID");

                    b.ToTable("AuthorModelMangaModel");
                });

            modelBuilder.Entity("BlogModelPostModel", b =>
                {
                    b.Property<int>("BlogModelsBlogModelId")
                        .HasColumnType("int");

                    b.Property<int>("postsModelPostId")
                        .HasColumnType("int");

                    b.HasKey("BlogModelsBlogModelId", "postsModelPostId");

                    b.HasIndex("postsModelPostId");

                    b.ToTable("BlogModelPostModel");
                });

            modelBuilder.Entity("BuyPageLanguages", b =>
                {
                    b.Property<int>("BuyPagesId")
                        .HasColumnType("int");

                    b.Property<int>("_LanguageslanguageId")
                        .HasColumnType("int");

                    b.HasKey("BuyPagesId", "_LanguageslanguageId");

                    b.HasIndex("_LanguageslanguageId");

                    b.ToTable("BuyPageLanguages");
                });

            modelBuilder.Entity("BuyPageMangaModel", b =>
                {
                    b.Property<int>("BuyPagesId")
                        .HasColumnType("int");

                    b.Property<int>("_MangaModelsMangaID")
                        .HasColumnType("int");

                    b.HasKey("BuyPagesId", "_MangaModelsMangaID");

                    b.HasIndex("_MangaModelsMangaID");

                    b.ToTable("BuyPageMangaModel");
                });

            modelBuilder.Entity("ChapterModelGroupScanlatingModel", b =>
                {
                    b.Property<int>("GroupScanlatingModelsGroupScanlatingID")
                        .HasColumnType("int");

                    b.Property<int>("chapterModelschapterID")
                        .HasColumnType("int");

                    b.HasKey("GroupScanlatingModelsGroupScanlatingID", "chapterModelschapterID");

                    b.HasIndex("chapterModelschapterID");

                    b.ToTable("ChapterModelGroupScanlatingModel");
                });

            modelBuilder.Entity("CharacterCharacter", b =>
                {
                    b.Property<int>("FamilyCharacterId")
                        .HasColumnType("int");

                    b.Property<int>("Partner_sCharacterId")
                        .HasColumnType("int");

                    b.HasKey("FamilyCharacterId", "Partner_sCharacterId");

                    b.HasIndex("Partner_sCharacterId");

                    b.ToTable("CharacterCharacter");
                });

            modelBuilder.Entity("CharacterMangaModel", b =>
                {
                    b.Property<int>("CharactersCharacterId")
                        .HasColumnType("int");

                    b.Property<int>("MangaModelsMangaID")
                        .HasColumnType("int");

                    b.HasKey("CharactersCharacterId", "MangaModelsMangaID");

                    b.HasIndex("MangaModelsMangaID");

                    b.ToTable("CharacterMangaModel");
                });

            modelBuilder.Entity("CompletedBookListUserModel", b =>
                {
                    b.Property<int>("CompletedListCompletedBookListID")
                        .HasColumnType("int");

                    b.Property<string>("UserModelsId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CompletedListCompletedBookListID", "UserModelsId");

                    b.HasIndex("UserModelsId");

                    b.ToTable("CompletedBookListUserModel");
                });

            modelBuilder.Entity("DroppedBookListUserModel", b =>
                {
                    b.Property<int>("DroppedListDroppedId")
                        .HasColumnType("int");

                    b.Property<string>("UserModelsId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("DroppedListDroppedId", "UserModelsId");

                    b.HasIndex("UserModelsId");

                    b.ToTable("DroppedBookListUserModel");
                });

            modelBuilder.Entity("FavoritBookListUserModel", b =>
                {
                    b.Property<int>("FavoritListFavoritBookListId")
                        .HasColumnType("int");

                    b.Property<string>("UserModelsId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("FavoritListFavoritBookListId", "UserModelsId");

                    b.HasIndex("UserModelsId");

                    b.ToTable("FavoritBookListUserModel");
                });

            modelBuilder.Entity("GenresModelMangaModel", b =>
                {
                    b.Property<int>("GenresModelsGenresId")
                        .HasColumnType("int");

                    b.Property<int>("MangaModelsMangaID")
                        .HasColumnType("int");

                    b.HasKey("GenresModelsGenresId", "MangaModelsMangaID");

                    b.HasIndex("MangaModelsMangaID");

                    b.ToTable("GenresModelMangaModel");
                });

            modelBuilder.Entity("GroupScanlatingModelMangaModel", b =>
                {
                    b.Property<int>("GroupScanlatingID")
                        .HasColumnType("int");

                    b.Property<int>("MangaModelsMangaID")
                        .HasColumnType("int");

                    b.HasKey("GroupScanlatingID", "MangaModelsMangaID");

                    b.HasIndex("MangaModelsMangaID");

                    b.ToTable("GroupScanlatingModelMangaModel");
                });

            modelBuilder.Entity("GroupScanlatingModelUserModel", b =>
                {
                    b.Property<int>("GroupScanlatingID")
                        .HasColumnType("int");

                    b.Property<string>("userModelsId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("GroupScanlatingID", "userModelsId");

                    b.HasIndex("userModelsId");

                    b.ToTable("GroupScanlatingModelUserModel");
                });

            modelBuilder.Entity("LanguagesMangaModel", b =>
                {
                    b.Property<int>("AllLanguageslanguageId")
                        .HasColumnType("int");

                    b.Property<int>("MangaModelsMangaID")
                        .HasColumnType("int");

                    b.HasKey("AllLanguageslanguageId", "MangaModelsMangaID");

                    b.HasIndex("MangaModelsMangaID");

                    b.ToTable("LanguagesMangaModel");
                });

            modelBuilder.Entity("MangaModelMangaModel", b =>
                {
                    b.Property<int>("RecommendedMangaModelsMangaID")
                        .HasColumnType("int");

                    b.Property<int>("relatedSeriesMangaID")
                        .HasColumnType("int");

                    b.HasKey("RecommendedMangaModelsMangaID", "relatedSeriesMangaID");

                    b.HasIndex("relatedSeriesMangaID");

                    b.ToTable("MangaModelMangaModel");
                });

            modelBuilder.Entity("MangaModelReview", b =>
                {
                    b.Property<int>("MangaModelsMangaID")
                        .HasColumnType("int");

                    b.Property<int>("reviewsReviewID")
                        .HasColumnType("int");

                    b.HasKey("MangaModelsMangaID", "reviewsReviewID");

                    b.HasIndex("reviewsReviewID");

                    b.ToTable("MangaModelReview");
                });

            modelBuilder.Entity("MangaModelService.ArtistModel", b =>
                {
                    b.Property<int>("ArtistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ArtistId"), 1L, 1);

                    b.Property<int?>("AmountOfWork")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ArtistBorn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ArtistDeath")
                        .HasColumnType("datetime2");

                    b.Property<string>("Biography")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BirthPlace")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Contact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameInNative")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Twitter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WikiPedia")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkingAt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isChecked")
                        .HasColumnType("bit");

                    b.Property<string>("reddit")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ArtistId");

                    b.ToTable("artistModels");
                });

            modelBuilder.Entity("MangaModelService.AssociatedNames", b =>
                {
                    b.Property<int>("AssociatedNamesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AssociatedNamesId"), 1L, 1);

                    b.Property<int?>("ArtistId")
                        .HasColumnType("int");

                    b.Property<int?>("AuthorID")
                        .HasColumnType("int");

                    b.Property<int?>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int?>("GroupScanlatingModelGroupScanlatingID")
                        .HasColumnType("int");

                    b.Property<int?>("MangaID")
                        .HasColumnType("int");

                    b.Property<int?>("VoiceActorId")
                        .HasColumnType("int");

                    b.Property<bool>("isChecked")
                        .HasColumnType("bit");

                    b.Property<int?>("mangaModelMangaID")
                        .HasColumnType("int");

                    b.Property<string>("nameString")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AssociatedNamesId");

                    b.HasIndex("ArtistId");

                    b.HasIndex("AuthorID");

                    b.HasIndex("CharacterId");

                    b.HasIndex("GroupScanlatingModelGroupScanlatingID");

                    b.HasIndex("VoiceActorId");

                    b.HasIndex("mangaModelMangaID");

                    b.ToTable("AssociatedNames");
                });

            modelBuilder.Entity("MangaModelService.AuthorModel", b =>
                {
                    b.Property<int>("AuthorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuthorID"), 1L, 1);

                    b.Property<int?>("AmountOfWork")
                        .HasColumnType("int");

                    b.Property<DateTime?>("AuthorBorn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("AuthorDeath")
                        .HasColumnType("datetime2");

                    b.Property<string>("Biography")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BirthPlace")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Contact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameInNative")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Twitter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WikiPedia")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkingAt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isChecked")
                        .HasColumnType("bit");

                    b.Property<string>("reddit")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuthorID");

                    b.ToTable("authorModels");
                });

            modelBuilder.Entity("MangaModelService.BlogModel", b =>
                {
                    b.Property<int>("BlogModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BlogModelId"), 1L, 1);

                    b.Property<int>("MangaId")
                        .HasColumnType("int");

                    b.Property<string>("UserModelId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("isChecked")
                        .HasColumnType("bit");

                    b.Property<string>("mangaName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BlogModelId");

                    b.HasIndex("UserModelId");

                    b.ToTable("blogModels");
                });

            modelBuilder.Entity("MangaModelService.BuyPage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("BuyWebsite")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isChecked")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("BuyPages");
                });

            modelBuilder.Entity("MangaModelService.ChapterModel", b =>
                {
                    b.Property<int>("chapterID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("chapterID"), 1L, 1);

                    b.Property<int>("GroupScanlatingID")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedChapter")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Volumes")
                        .HasColumnType("int");

                    b.Property<string>("chapterLinkNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("chapterName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("chapterNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("dateRelease")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isChecked")
                        .HasColumnType("bit");

                    b.HasKey("chapterID");

                    b.ToTable("chapterModels");
                });

            modelBuilder.Entity("MangaModelService.Character", b =>
                {
                    b.Property<int>("CharacterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CharacterId"), 1L, 1);

                    b.Property<string>("Abilities")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Background")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Born")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CharacterName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Death")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Dislikes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Education")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EyeColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FamousQuote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HairColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Height")
                        .HasColumnType("int");

                    b.Property<string>("Hobbies")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lawful")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Likes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nationality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Occupation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Personality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonalityTraits")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlaceOffResidence")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Weight")
                        .HasColumnType("int");

                    b.Property<string>("World")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isChecked")
                        .HasColumnType("bit");

                    b.Property<string>("specie")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CharacterId");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("MangaModelService.CompletedBookList", b =>
                {
                    b.Property<int>("CompletedBookListID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompletedBookListID"), 1L, 1);

                    b.Property<int?>("MangaModelId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isChecked")
                        .HasColumnType("bit");

                    b.HasKey("CompletedBookListID");

                    b.ToTable("completedBookLists");
                });

            modelBuilder.Entity("MangaModelService.DroppedBookList", b =>
                {
                    b.Property<int>("DroppedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DroppedId"), 1L, 1);

                    b.Property<int?>("MangaModelId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isChecked")
                        .HasColumnType("bit");

                    b.HasKey("DroppedId");

                    b.ToTable("droppedBookLists");
                });

            modelBuilder.Entity("MangaModelService.FavoritBookList", b =>
                {
                    b.Property<int>("FavoritBookListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FavoritBookListId"), 1L, 1);

                    b.Property<int?>("MangaModelId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isChecked")
                        .HasColumnType("bit");

                    b.HasKey("FavoritBookListId");

                    b.ToTable("favoritBookLists");
                });

            modelBuilder.Entity("MangaModelService.GenresModel", b =>
                {
                    b.Property<int>("GenresId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GenresId"), 1L, 1);

                    b.Property<string>("GenreDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GenreName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MangaID")
                        .HasColumnType("int");

                    b.Property<int?>("TagHeavy")
                        .HasColumnType("int");

                    b.Property<bool>("isChecked")
                        .HasColumnType("bit");

                    b.HasKey("GenresId");

                    b.ToTable("GenresModels");
                });

            modelBuilder.Entity("MangaModelService.GroupScanlatingModel", b =>
                {
                    b.Property<int>("GroupScanlatingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GroupScanlatingID"), 1L, 1);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsChecked")
                        .HasColumnType("bit");

                    b.Property<int?>("MangaModelId")
                        .HasColumnType("int");

                    b.Property<string>("PhotoPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("userID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GroupScanlatingID");

                    b.ToTable("groupScanlatingModels");

                    b.HasDiscriminator<string>("Discriminator").HasValue("GroupScanlatingModel");
                });

            modelBuilder.Entity("MangaModelService.Languages", b =>
                {
                    b.Property<int>("languageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("languageId"), 1L, 1);

                    b.Property<string>("FlagUniCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsChecked")
                        .HasColumnType("bit");

                    b.Property<string>("LanguageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MangaID")
                        .HasColumnType("int");

                    b.Property<int?>("OfficalWebsiteOfficalID")
                        .HasColumnType("int");

                    b.HasKey("languageId");

                    b.HasIndex("OfficalWebsiteOfficalID");

                    b.ToTable("Languages_");
                });

            modelBuilder.Entity("MangaModelService.MangaModel", b =>
                {
                    b.Property<int>("MangaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MangaID"), 1L, 1);

                    b.Property<int>("BlogModelId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("BookAddedToDB")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CompletedBookListID")
                        .HasColumnType("int");

                    b.Property<string>("CompletelyTranslated")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DailyRead")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DroppedBookListDroppedId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndingYear")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FavoritBookListId")
                        .HasColumnType("int");

                    b.Property<int?>("ForeverRead")
                        .HasColumnType("int");

                    b.Property<int?>("GroupScanlatingID")
                        .HasColumnType("int");

                    b.Property<string>("ISBN10")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ISBN13")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsChecked")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastDailyReadDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastMonthlyReadDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastWeeklyReadDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastYearlyReadDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MangaName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MonthRead")
                        .HasColumnType("int");

                    b.Property<string>("OfficalLanguage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OriginalPublisher")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PageView")
                        .HasColumnType("int");

                    b.Property<string>("PhotoPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Rank")
                        .HasColumnType("int");

                    b.Property<int?>("ReadingListReadId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReleaseYear")
                        .HasColumnType("datetime2");

                    b.Property<string>("StatusInCountryOfOrigin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("WeekRead")
                        .HasColumnType("int");

                    b.Property<int?>("WishBookListId")
                        .HasColumnType("int");

                    b.Property<int?>("YearRead")
                        .HasColumnType("int");

                    b.Property<string>("futureEvents")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("orignalWebtoon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("userId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MangaID");

                    b.HasIndex("BlogModelId")
                        .IsUnique();

                    b.HasIndex("CompletedBookListID");

                    b.HasIndex("DroppedBookListDroppedId");

                    b.HasIndex("FavoritBookListId");

                    b.HasIndex("ReadingListReadId");

                    b.HasIndex("WishBookListId");

                    b.ToTable("mangaModels");
                });

            modelBuilder.Entity("MangaModelService.OfficalWebsite", b =>
                {
                    b.Property<int>("OfficalID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OfficalID"), 1L, 1);

                    b.Property<int?>("ArtistId")
                        .HasColumnType("int");

                    b.Property<int?>("AuthorID")
                        .HasColumnType("int");

                    b.Property<int?>("CharacterId")
                        .HasColumnType("int");

                    b.Property<string>("Facebook")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GroupScanId")
                        .HasColumnType("int");

                    b.Property<string>("Instagram")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsChecked")
                        .HasColumnType("bit");

                    b.Property<string>("Line")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MangaID")
                        .HasColumnType("int");

                    b.Property<string>("Naver")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OfficalWebsiteName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OfficalWebsiteString")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Twitter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("VoiceActorId")
                        .HasColumnType("int");

                    b.Property<int?>("groupScanlatingModelGroupScanlatingID")
                        .HasColumnType("int");

                    b.Property<int?>("mangaModelMangaID")
                        .HasColumnType("int");

                    b.HasKey("OfficalID");

                    b.HasIndex("ArtistId");

                    b.HasIndex("AuthorID");

                    b.HasIndex("CharacterId");

                    b.HasIndex("VoiceActorId");

                    b.HasIndex("groupScanlatingModelGroupScanlatingID");

                    b.HasIndex("mangaModelMangaID");

                    b.ToTable("OfficalWebsites");
                });

            modelBuilder.Entity("MangaModelService.PostModel", b =>
                {
                    b.Property<int?>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("PostId"), 1L, 1);

                    b.Property<DateTime>("CommentPostedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsChecked")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("NextAllowedPostTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ParentPostId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("postComment")
                        .IsRequired()
                        .HasMaxLength(750)
                        .HasColumnType("nvarchar(750)");

                    b.Property<double?>("score")
                        .HasColumnType("float");

                    b.HasKey("PostId");

                    b.HasIndex("ParentPostId");

                    b.ToTable("PostModels");
                });

            modelBuilder.Entity("MangaModelService.ReadingList", b =>
                {
                    b.Property<int>("ReadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReadId"), 1L, 1);

                    b.Property<bool>("IsChecked")
                        .HasColumnType("bit");

                    b.Property<int?>("MangaModelId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReadId");

                    b.ToTable("readingLists");
                });

            modelBuilder.Entity("MangaModelService.Review", b =>
                {
                    b.Property<int>("ReviewID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewID"), 1L, 1);

                    b.Property<double>("CharactersScore")
                        .HasColumnType("float");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(750)
                        .HasColumnType("nvarchar(750)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<double>("GrammarScore")
                        .HasColumnType("float");

                    b.Property<bool>("IsChecked")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<double>("StoryScore")
                        .HasColumnType("float");

                    b.Property<double>("StylesScore")
                        .HasColumnType("float");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ReviewID");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("MangaModelService.TagModel", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TagId"), 1L, 1);

                    b.Property<int?>("MangaID")
                        .HasColumnType("int");

                    b.Property<string>("TagDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TagHeavy")
                        .HasColumnType("int");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isChecked")
                        .HasColumnType("bit");

                    b.HasKey("TagId");

                    b.ToTable("TagModels");
                });

            modelBuilder.Entity("MangaModelService.VoiceActorModel", b =>
                {
                    b.Property<int>("VoiceActorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VoiceActorId"), 1L, 1);

                    b.Property<int?>("AmountOfWork")
                        .HasColumnType("int");

                    b.Property<string>("Biography")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BirthPlace")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CharacterName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Contact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsChecked")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameInNative")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Twitter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("VoiceBorn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("VoiceDeath")
                        .HasColumnType("datetime2");

                    b.Property<string>("WikiPedia")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkingAt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("reddit")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VoiceActorId");

                    b.ToTable("voiceActorModels");
                });

            modelBuilder.Entity("MangaModelService.WallPapers", b =>
                {
                    b.Property<int>("WallpaperID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WallpaperID"), 1L, 1);

                    b.Property<string>("WallPaperPhotoPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WallpaperID");

                    b.ToTable("WallPapers");
                });

            modelBuilder.Entity("MangaModelService.WishBookList", b =>
                {
                    b.Property<int>("WishBookListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WishBookListId"), 1L, 1);

                    b.Property<bool?>("IsChecked")
                        .HasColumnType("bit");

                    b.Property<int?>("MangaModelId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WishBookListId");

                    b.ToTable("wishBookLists");
                });

            modelBuilder.Entity("MangaModelTagModel", b =>
                {
                    b.Property<int>("MangaModelsMangaID")
                        .HasColumnType("int");

                    b.Property<int>("TagsModelsTagId")
                        .HasColumnType("int");

                    b.HasKey("MangaModelsMangaID", "TagsModelsTagId");

                    b.HasIndex("TagsModelsTagId");

                    b.ToTable("MangaModelTagModel");
                });

            modelBuilder.Entity("MangaModelUserModel", b =>
                {
                    b.Property<int>("MangaModelsMangaID")
                        .HasColumnType("int");

                    b.Property<string>("userModelsId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("MangaModelsMangaID", "userModelsId");

                    b.HasIndex("userModelsId");

                    b.ToTable("MangaModelUserModel");
                });

            modelBuilder.Entity("MangaModelVoiceActorModel", b =>
                {
                    b.Property<int>("MangaModelsMangaID")
                        .HasColumnType("int");

                    b.Property<int>("VoiceActorsVoiceActorId")
                        .HasColumnType("int");

                    b.HasKey("MangaModelsMangaID", "VoiceActorsVoiceActorId");

                    b.HasIndex("VoiceActorsVoiceActorId");

                    b.ToTable("MangaModelVoiceActorModel");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PostModelUserModel", b =>
                {
                    b.Property<int>("PostModelPostId")
                        .HasColumnType("int");

                    b.Property<string>("UserModelId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PostModelPostId", "UserModelId");

                    b.HasIndex("UserModelId");

                    b.ToTable("PostModelUserModel");
                });

            modelBuilder.Entity("ReadingListUserModel", b =>
                {
                    b.Property<int>("ReadingListReadId")
                        .HasColumnType("int");

                    b.Property<string>("UserModelsId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ReadingListReadId", "UserModelsId");

                    b.HasIndex("UserModelsId");

                    b.ToTable("ReadingListUserModel");
                });

            modelBuilder.Entity("ReviewUserModel", b =>
                {
                    b.Property<int>("ReviewsReviewID")
                        .HasColumnType("int");

                    b.Property<string>("UserModelsId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ReviewsReviewID", "UserModelsId");

                    b.HasIndex("UserModelsId");

                    b.ToTable("ReviewUserModel");
                });

            modelBuilder.Entity("UserModelWishBookList", b =>
                {
                    b.Property<string>("UserModelsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("WishListWishBookListId")
                        .HasColumnType("int");

                    b.HasKey("UserModelsId", "WishListWishBookListId");

                    b.HasIndex("WishListWishBookListId");

                    b.ToTable("UserModelWishBookList");
                });

            modelBuilder.Entity("MangaModelService.StudioModel", b =>
                {
                    b.HasBaseType("MangaModelService.GroupScanlatingModel");

                    b.Property<string>("Biography")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DissolutionOfCorporation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Started")
                        .HasColumnType("datetime2");

                    b.Property<string>("StudioWebsite")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Works")
                        .HasColumnType("int");

                    b.HasIndex("MangaModelId");

                    b.HasDiscriminator().HasValue("StudioModel");
                });

            modelBuilder.Entity("MangaModelService.UserModel", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("Allias")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAcc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ForgottPasswordFavActor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ForgottPasswordFavoritAnimal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ForgottPasswordFavoritPlace")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ForumName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsChecked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsShadowBanned")
                        .HasColumnType("bit");

                    b.Property<int?>("MangaModelId")
                        .HasColumnType("int");

                    b.Property<string>("Twitter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Zodiac")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("groupScanlationID")
                        .HasColumnType("int");

                    b.Property<string>("nameInNativeLanguage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("placeOfBirth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("postModelID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("userPhotoPath")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("UserModel");
                });

            modelBuilder.Entity("ArtistModelMangaModel", b =>
                {
                    b.HasOne("MangaModelService.ArtistModel", null)
                        .WithMany()
                        .HasForeignKey("ArtistModelsArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MangaModelService.MangaModel", null)
                        .WithMany()
                        .HasForeignKey("MangaModelsMangaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AuthorModelMangaModel", b =>
                {
                    b.HasOne("MangaModelService.AuthorModel", null)
                        .WithMany()
                        .HasForeignKey("AuthormodelsAuthorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MangaModelService.MangaModel", null)
                        .WithMany()
                        .HasForeignKey("MangaModelsMangaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BlogModelPostModel", b =>
                {
                    b.HasOne("MangaModelService.BlogModel", null)
                        .WithMany()
                        .HasForeignKey("BlogModelsBlogModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MangaModelService.PostModel", null)
                        .WithMany()
                        .HasForeignKey("postsModelPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BuyPageLanguages", b =>
                {
                    b.HasOne("MangaModelService.BuyPage", null)
                        .WithMany()
                        .HasForeignKey("BuyPagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MangaModelService.Languages", null)
                        .WithMany()
                        .HasForeignKey("_LanguageslanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BuyPageMangaModel", b =>
                {
                    b.HasOne("MangaModelService.BuyPage", null)
                        .WithMany()
                        .HasForeignKey("BuyPagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MangaModelService.MangaModel", null)
                        .WithMany()
                        .HasForeignKey("_MangaModelsMangaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ChapterModelGroupScanlatingModel", b =>
                {
                    b.HasOne("MangaModelService.GroupScanlatingModel", null)
                        .WithMany()
                        .HasForeignKey("GroupScanlatingModelsGroupScanlatingID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MangaModelService.ChapterModel", null)
                        .WithMany()
                        .HasForeignKey("chapterModelschapterID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CharacterCharacter", b =>
                {
                    b.HasOne("MangaModelService.Character", null)
                        .WithMany()
                        .HasForeignKey("FamilyCharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MangaModelService.Character", null)
                        .WithMany()
                        .HasForeignKey("Partner_sCharacterId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CharacterMangaModel", b =>
                {
                    b.HasOne("MangaModelService.Character", null)
                        .WithMany()
                        .HasForeignKey("CharactersCharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MangaModelService.MangaModel", null)
                        .WithMany()
                        .HasForeignKey("MangaModelsMangaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CompletedBookListUserModel", b =>
                {
                    b.HasOne("MangaModelService.CompletedBookList", null)
                        .WithMany()
                        .HasForeignKey("CompletedListCompletedBookListID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MangaModelService.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserModelsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DroppedBookListUserModel", b =>
                {
                    b.HasOne("MangaModelService.DroppedBookList", null)
                        .WithMany()
                        .HasForeignKey("DroppedListDroppedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MangaModelService.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserModelsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FavoritBookListUserModel", b =>
                {
                    b.HasOne("MangaModelService.FavoritBookList", null)
                        .WithMany()
                        .HasForeignKey("FavoritListFavoritBookListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MangaModelService.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserModelsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GenresModelMangaModel", b =>
                {
                    b.HasOne("MangaModelService.GenresModel", null)
                        .WithMany()
                        .HasForeignKey("GenresModelsGenresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MangaModelService.MangaModel", null)
                        .WithMany()
                        .HasForeignKey("MangaModelsMangaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GroupScanlatingModelMangaModel", b =>
                {
                    b.HasOne("MangaModelService.GroupScanlatingModel", null)
                        .WithMany()
                        .HasForeignKey("GroupScanlatingID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MangaModelService.MangaModel", null)
                        .WithMany()
                        .HasForeignKey("MangaModelsMangaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GroupScanlatingModelUserModel", b =>
                {
                    b.HasOne("MangaModelService.GroupScanlatingModel", null)
                        .WithMany()
                        .HasForeignKey("GroupScanlatingID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MangaModelService.UserModel", null)
                        .WithMany()
                        .HasForeignKey("userModelsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LanguagesMangaModel", b =>
                {
                    b.HasOne("MangaModelService.Languages", null)
                        .WithMany()
                        .HasForeignKey("AllLanguageslanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MangaModelService.MangaModel", null)
                        .WithMany()
                        .HasForeignKey("MangaModelsMangaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MangaModelMangaModel", b =>
                {
                    b.HasOne("MangaModelService.MangaModel", null)
                        .WithMany()
                        .HasForeignKey("RecommendedMangaModelsMangaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MangaModelService.MangaModel", null)
                        .WithMany()
                        .HasForeignKey("relatedSeriesMangaID")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MangaModelReview", b =>
                {
                    b.HasOne("MangaModelService.MangaModel", null)
                        .WithMany()
                        .HasForeignKey("MangaModelsMangaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MangaModelService.Review", null)
                        .WithMany()
                        .HasForeignKey("reviewsReviewID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MangaModelService.AssociatedNames", b =>
                {
                    b.HasOne("MangaModelService.ArtistModel", "ArtistModel")
                        .WithMany("AssociatedNames")
                        .HasForeignKey("ArtistId");

                    b.HasOne("MangaModelService.AuthorModel", "AuthorModel")
                        .WithMany("AssociatedNames")
                        .HasForeignKey("AuthorID");

                    b.HasOne("MangaModelService.Character", "Characters")
                        .WithMany("AssociatedNames")
                        .HasForeignKey("CharacterId");

                    b.HasOne("MangaModelService.GroupScanlatingModel", null)
                        .WithMany("AssociatedNames")
                        .HasForeignKey("GroupScanlatingModelGroupScanlatingID");

                    b.HasOne("MangaModelService.VoiceActorModel", "VoiceActorModel")
                        .WithMany("AssociatedNames")
                        .HasForeignKey("VoiceActorId");

                    b.HasOne("MangaModelService.MangaModel", "mangaModel")
                        .WithMany("AssociatedNames")
                        .HasForeignKey("mangaModelMangaID");

                    b.Navigation("ArtistModel");

                    b.Navigation("AuthorModel");

                    b.Navigation("Characters");

                    b.Navigation("VoiceActorModel");

                    b.Navigation("mangaModel");
                });

            modelBuilder.Entity("MangaModelService.BlogModel", b =>
                {
                    b.HasOne("MangaModelService.UserModel", null)
                        .WithMany("UserBlogModel")
                        .HasForeignKey("UserModelId");
                });

            modelBuilder.Entity("MangaModelService.Languages", b =>
                {
                    b.HasOne("MangaModelService.OfficalWebsite", null)
                        .WithMany("Languages")
                        .HasForeignKey("OfficalWebsiteOfficalID");
                });

            modelBuilder.Entity("MangaModelService.MangaModel", b =>
                {
                    b.HasOne("MangaModelService.BlogModel", "BlogModel")
                        .WithOne("MangaModel")
                        .HasForeignKey("MangaModelService.MangaModel", "BlogModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MangaModelService.CompletedBookList", null)
                        .WithMany("ReadingMangaList")
                        .HasForeignKey("CompletedBookListID");

                    b.HasOne("MangaModelService.DroppedBookList", null)
                        .WithMany("_DroppedBooks")
                        .HasForeignKey("DroppedBookListDroppedId");

                    b.HasOne("MangaModelService.FavoritBookList", null)
                        .WithMany("FavoritBooks")
                        .HasForeignKey("FavoritBookListId");

                    b.HasOne("MangaModelService.ReadingList", null)
                        .WithMany("ReadingMangaList")
                        .HasForeignKey("ReadingListReadId");

                    b.HasOne("MangaModelService.WishBookList", null)
                        .WithMany("WishBooks")
                        .HasForeignKey("WishBookListId");

                    b.Navigation("BlogModel");
                });

            modelBuilder.Entity("MangaModelService.OfficalWebsite", b =>
                {
                    b.HasOne("MangaModelService.ArtistModel", "ArtistModel")
                        .WithMany("OfficalWebsites")
                        .HasForeignKey("ArtistId");

                    b.HasOne("MangaModelService.AuthorModel", "AuthorModel")
                        .WithMany("OfficalWebsites")
                        .HasForeignKey("AuthorID");

                    b.HasOne("MangaModelService.Character", "Characters")
                        .WithMany("OfficalWebsites")
                        .HasForeignKey("CharacterId");

                    b.HasOne("MangaModelService.VoiceActorModel", "VoiceActorModel")
                        .WithMany("OfficalWebsites")
                        .HasForeignKey("VoiceActorId");

                    b.HasOne("MangaModelService.GroupScanlatingModel", "groupScanlatingModel")
                        .WithMany("OfficalWebsites")
                        .HasForeignKey("groupScanlatingModelGroupScanlatingID");

                    b.HasOne("MangaModelService.MangaModel", "mangaModel")
                        .WithMany("OfficalWebsites")
                        .HasForeignKey("mangaModelMangaID");

                    b.Navigation("ArtistModel");

                    b.Navigation("AuthorModel");

                    b.Navigation("Characters");

                    b.Navigation("VoiceActorModel");

                    b.Navigation("groupScanlatingModel");

                    b.Navigation("mangaModel");
                });

            modelBuilder.Entity("MangaModelService.PostModel", b =>
                {
                    b.HasOne("MangaModelService.PostModel", "ParentPost")
                        .WithMany("Replies")
                        .HasForeignKey("ParentPostId");

                    b.Navigation("ParentPost");
                });

            modelBuilder.Entity("MangaModelTagModel", b =>
                {
                    b.HasOne("MangaModelService.MangaModel", null)
                        .WithMany()
                        .HasForeignKey("MangaModelsMangaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MangaModelService.TagModel", null)
                        .WithMany()
                        .HasForeignKey("TagsModelsTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MangaModelUserModel", b =>
                {
                    b.HasOne("MangaModelService.MangaModel", null)
                        .WithMany()
                        .HasForeignKey("MangaModelsMangaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MangaModelService.UserModel", null)
                        .WithMany()
                        .HasForeignKey("userModelsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MangaModelVoiceActorModel", b =>
                {
                    b.HasOne("MangaModelService.MangaModel", null)
                        .WithMany()
                        .HasForeignKey("MangaModelsMangaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MangaModelService.VoiceActorModel", null)
                        .WithMany()
                        .HasForeignKey("VoiceActorsVoiceActorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PostModelUserModel", b =>
                {
                    b.HasOne("MangaModelService.PostModel", null)
                        .WithMany()
                        .HasForeignKey("PostModelPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MangaModelService.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ReadingListUserModel", b =>
                {
                    b.HasOne("MangaModelService.ReadingList", null)
                        .WithMany()
                        .HasForeignKey("ReadingListReadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MangaModelService.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserModelsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ReviewUserModel", b =>
                {
                    b.HasOne("MangaModelService.Review", null)
                        .WithMany()
                        .HasForeignKey("ReviewsReviewID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MangaModelService.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserModelsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UserModelWishBookList", b =>
                {
                    b.HasOne("MangaModelService.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserModelsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MangaModelService.WishBookList", null)
                        .WithMany()
                        .HasForeignKey("WishListWishBookListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MangaModelService.StudioModel", b =>
                {
                    b.HasOne("MangaModelService.MangaModel", null)
                        .WithMany("StudioModels")
                        .HasForeignKey("MangaModelId");
                });

            modelBuilder.Entity("MangaModelService.ArtistModel", b =>
                {
                    b.Navigation("AssociatedNames");

                    b.Navigation("OfficalWebsites");
                });

            modelBuilder.Entity("MangaModelService.AuthorModel", b =>
                {
                    b.Navigation("AssociatedNames");

                    b.Navigation("OfficalWebsites");
                });

            modelBuilder.Entity("MangaModelService.BlogModel", b =>
                {
                    b.Navigation("MangaModel")
                        .IsRequired();
                });

            modelBuilder.Entity("MangaModelService.Character", b =>
                {
                    b.Navigation("AssociatedNames");

                    b.Navigation("OfficalWebsites");
                });

            modelBuilder.Entity("MangaModelService.CompletedBookList", b =>
                {
                    b.Navigation("ReadingMangaList");
                });

            modelBuilder.Entity("MangaModelService.DroppedBookList", b =>
                {
                    b.Navigation("_DroppedBooks");
                });

            modelBuilder.Entity("MangaModelService.FavoritBookList", b =>
                {
                    b.Navigation("FavoritBooks");
                });

            modelBuilder.Entity("MangaModelService.GroupScanlatingModel", b =>
                {
                    b.Navigation("AssociatedNames");

                    b.Navigation("OfficalWebsites");
                });

            modelBuilder.Entity("MangaModelService.MangaModel", b =>
                {
                    b.Navigation("AssociatedNames");

                    b.Navigation("OfficalWebsites");

                    b.Navigation("StudioModels");
                });

            modelBuilder.Entity("MangaModelService.OfficalWebsite", b =>
                {
                    b.Navigation("Languages");
                });

            modelBuilder.Entity("MangaModelService.PostModel", b =>
                {
                    b.Navigation("Replies");
                });

            modelBuilder.Entity("MangaModelService.ReadingList", b =>
                {
                    b.Navigation("ReadingMangaList");
                });

            modelBuilder.Entity("MangaModelService.VoiceActorModel", b =>
                {
                    b.Navigation("AssociatedNames");

                    b.Navigation("OfficalWebsites");
                });

            modelBuilder.Entity("MangaModelService.WishBookList", b =>
                {
                    b.Navigation("WishBooks");
                });

            modelBuilder.Entity("MangaModelService.UserModel", b =>
                {
                    b.Navigation("UserBlogModel");
                });
#pragma warning restore 612, 618
        }
    }
}
